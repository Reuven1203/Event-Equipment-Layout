{"ast":null,"code":"var _jsxFileName = \"/Users/reuvenostrofsky/Downloads/sound-system/src/Components/CustomizableSelector/index.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useReducer } from 'react';\nimport { SpeakerGroup, Light, Fluorescent } from '@mui/icons-material';\nimport Card from '../PackageSelector/Card';\n\n// Action types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  0: {\n    checked: true,\n    quantity: 1\n  },\n  1: {\n    checked: false,\n    quantity: 0\n  },\n  2: {\n    checked: false,\n    quantity: 0\n  },\n  3: {\n    checked: false,\n    quantity: 0\n  }\n};\nconst reducer = (state, action) => {\n  var _action$payload$quant;\n  switch (action.type) {\n    case 'TOGGLE_CHECK':\n      return {\n        ...state,\n        [action.payload.id]: {\n          ...state[action.payload.id],\n          checked: !state[action.payload.id].checked,\n          quantity: 1\n        }\n      };\n    case 'SET_QUANTITY':\n      return {\n        ...state,\n        [action.payload.id]: {\n          ...state[action.payload.id],\n          checked: true,\n          quantity: (_action$payload$quant = action.payload.quantity) !== null && _action$payload$quant !== void 0 ? _action$payload$quant : 0\n        }\n      };\n    default:\n      return state;\n  }\n};\nconst CustomizableSelector = props => {\n  _s();\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    console.log(\"Current form state:\", state);\n  }, [state]);\n  const equipmentList = [{\n    id: 0,\n    name: 'Speaker',\n    icon: /*#__PURE__*/_jsxDEV(SpeakerGroup, {\n      sx: {\n        color: 'white'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 19\n    }, this),\n    emptyIcon: /*#__PURE__*/_jsxDEV(SpeakerGroup, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 24\n    }, this),\n    min: 1,\n    max: 3\n  }, {\n    id: 1,\n    name: 'Bass',\n    icon: /*#__PURE__*/_jsxDEV(SpeakerGroup, {\n      sx: {\n        color: 'white'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 19\n    }, this),\n    emptyIcon: /*#__PURE__*/_jsxDEV(SpeakerGroup, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 24\n    }, this),\n    min: 0,\n    max: state[0].quantity\n  }, {\n    id: 2,\n    name: 'Moving Head',\n    icon: /*#__PURE__*/_jsxDEV(Light, {\n      sx: {\n        color: 'white'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 19\n    }, this),\n    emptyIcon: /*#__PURE__*/_jsxDEV(Light, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 24\n    }, this),\n    min: 0,\n    max: 4\n  }, {\n    id: 3,\n    name: 'Gigbar',\n    icon: /*#__PURE__*/_jsxDEV(Fluorescent, {\n      sx: {\n        color: 'white'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 19\n    }, this),\n    emptyIcon: /*#__PURE__*/_jsxDEV(Fluorescent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 24\n    }, this)\n  }];\n  const handleCheckboxChange = equipmentId => event => {\n    dispatch({\n      type: 'TOGGLE_CHECK',\n      payload: {\n        id: equipmentId\n      }\n    });\n  };\n  const handleRatingChange = equipmentId => (event, newValue) => {\n    let finalValue = newValue;\n    if (equipmentId === 0 && (!newValue || newValue < 1)) {\n      // Assuming the Speaker has id 0\n      finalValue = 1;\n    }\n    dispatch({\n      type: 'SET_QUANTITY',\n      payload: {\n        id: equipmentId,\n        quantity: finalValue\n      }\n    });\n  };\n  const onClickHandler = () => {\n    props.onClick(100);\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    isSelected: props.isSelected,\n    onClick: onClickHandler,\n    isCustomize: true,\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: 'w-full text-center p-2',\n      children: \"Customize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 8\n  }, this);\n};\n_s(CustomizableSelector, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = CustomizableSelector;\nexport default CustomizableSelector;\nvar _c;\n$RefreshReg$(_c, \"CustomizableSelector\");","map":{"version":3,"names":["useEffect","useReducer","SpeakerGroup","Light","Fluorescent","Card","jsxDEV","_jsxDEV","initialState","checked","quantity","reducer","state","action","_action$payload$quant","type","payload","id","CustomizableSelector","props","_s","dispatch","console","log","equipmentList","name","icon","sx","color","fileName","_jsxFileName","lineNumber","columnNumber","emptyIcon","min","max","handleCheckboxChange","equipmentId","event","handleRatingChange","newValue","finalValue","onClickHandler","onClick","isSelected","isCustomize","children","className","_c","$RefreshReg$"],"sources":["/Users/reuvenostrofsky/Downloads/sound-system/src/Components/CustomizableSelector/index.tsx"],"sourcesContent":["import {FC, useEffect,useReducer} from 'react';\nimport {FormControlLabel,Checkbox, Rating} from '@mui/material';\nimport {Speaker,SpeakerGroup, Light, Fluorescent} from '@mui/icons-material';\nimport {calculateNewValue} from '@testing-library/user-event/dist/utils';\nimport Card from '../PackageSelector/Card';\n\ninterface EquipmentState {\n    checked: boolean;\n    quantity: number;\n}\n\ntype State = {\n    [equipmentName: string]: EquipmentState;\n};\n\n// Action types\ninterface ToggleCheckAction {\n    type: 'TOGGLE_CHECK';\n    payload: {\n        id: number;\n    };\n}\n\ninterface SetQuantityAction {\n    type: 'SET_QUANTITY';\n    payload: {\n        id: number;\n        quantity: number | null;\n    };\n}\n\n\ntype Action = ToggleCheckAction | SetQuantityAction;\n\nconst initialState = {\n    0: {\n        checked: true,\n        quantity: 1,\n    },\n    1: {\n        checked: false,\n        quantity: 0,\n    },\n    2: {\n        checked: false,\n        quantity: 0,\n    },\n    3: {\n        checked: false,\n        quantity: 0,\n    }\n};\n\nconst reducer = (state: State, action: Action) => {\n    switch (action.type) {\n        case 'TOGGLE_CHECK':\n            return {\n                ...state,\n                [action.payload.id]: {\n                    ...state[action.payload.id],\n                    checked: !state[action.payload.id].checked,\n                    quantity:1\n                },\n            };\n        case 'SET_QUANTITY':\n            return {\n                ...state,\n                [action.payload.id]: {\n                    ...state[action.payload.id],\n                    checked: true,\n                    quantity: action.payload.quantity ?? 0,\n                },\n            };\n        default:\n            return state;\n    }\n};\n\nconst CustomizableSelector:FC<{isSelected:boolean, onClick: (index:number)=>void}> = (props) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    useEffect(() => {\n        console.log(\"Current form state:\", state);\n    }, [state]);\n\n    const equipmentList = [{\n            id: 0,\n            name: 'Speaker',\n            icon: <SpeakerGroup sx={{color:'white'}}/>,\n            emptyIcon: <SpeakerGroup/>,\n            min: 1,\n            max:3,\n    },\n        {\n            id: 1,\n            name: 'Bass',\n            icon: <SpeakerGroup sx={{color:'white'}}/>,\n            emptyIcon: <SpeakerGroup/>,\n            min: 0,\n            max: state[0].quantity\n\n        },\n        {\n            id: 2,\n            name: 'Moving Head',\n            icon: <Light sx={{color:'white'}}/>,\n            emptyIcon: <Light/>,\n            min: 0,\n            max: 4\n\n\n        },\n        {\n            id: 3,\n            name: 'Gigbar',\n            icon: <Fluorescent sx={{color:'white'}}/>,\n            emptyIcon: <Fluorescent/>,\n\n        }\n    ];\n\n    const handleCheckboxChange = (equipmentId: number) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch({\n            type: 'TOGGLE_CHECK',\n            payload: {\n                id: equipmentId\n            },\n        });\n    };\n\n    const handleRatingChange = (equipmentId: number) => (event: any, newValue: number | null) => {\n        let finalValue = newValue;\n\n        if (equipmentId === 0 && (!newValue || newValue < 1)) {  // Assuming the Speaker has id 0\n            finalValue = 1;\n        }\n\n        dispatch({\n            type: 'SET_QUANTITY',\n            payload: {\n                id: equipmentId,\n                quantity: finalValue,\n            },\n        });\n    };\n\n    const onClickHandler = () => {\n        props.onClick(100);\n    }\n\n    return (\n       <Card isSelected={props.isSelected} onClick={onClickHandler} isCustomize={true}>\n           <h2 className={'w-full text-center p-2'}>Customize</h2>\n           {/*{props.isSelected &&*/}\n           {/*<div className={'p-3 flex-col'}>*/}\n           {/*    {equipmentList.map((equipment) => {*/}\n           {/*            return (*/}\n           {/*                <div key={equipment.id} className={'flex items-center'}>*/}\n           {/*                    <FormControlLabel  control={<Checkbox  checked={state[equipment.id]?.checked} onChange={equipment.id == 0 ? undefined :handleCheckboxChange(equipment.id)} sx={{*/}\n           {/*                        color: 'white',*/}\n           {/*                        '&.Mui-checked': {*/}\n           {/*                            color: 'white',*/}\n           {/*                        },*/}\n           {/*                    }}/>} name={equipment.name} id={equipment.name} label={equipment.name} />*/}\n           {/*                    <div>*/}\n           {/*                        <Rating value={state[equipment.id].checked? state[equipment.id].quantity : 0} onChange={handleRatingChange(equipment.id)} name={equipment.name} max={equipment.max} icon={equipment.icon} emptyIcon={equipment.emptyIcon}   />*/}\n           {/*                    </div>*/}\n           {/*                </div>*/}\n           {/*            )*/}\n           {/*        }*/}\n           {/*    )}*/}\n           {/*</div>}*/}\n       </Card>\n    );\n};\n\nexport default CustomizableSelector;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}